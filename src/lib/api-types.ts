/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/profile/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Profile
     * @description Create or update a user profile: compute embedding from company_name, company_description, and topic_list,
     *     then upsert the record into Supabase.
     */
    post: operations['create_profile_profile__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/meetings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Meetings */
    get: operations['get_meetings_meetings_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/crawler/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Dummy Crawl */
    get: operations['dummy_crawl_crawler__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/scheduler/tick': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Run Scheduled Tasks */
    get: operations['run_scheduled_tasks_scheduler_tick_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/scheduler/run/{job_name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Run Task */
    post: operations['run_task_scheduler_run__job_name__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get Chat Response */
    post: operations['get_chat_response_chat__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/start': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create New Session */
    post: operations['create_new_session_chat_start_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/sessions/{session_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get All Messages */
    get: operations['get_all_messages_chat_sessions__session_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/sessions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get User Sessions */
    get: operations['get_user_sessions_chat_sessions_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/topics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Topics */
    get: operations['get_topics_topics_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/notifications/{user_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Notifications For User
     * @description Retrieve all notifications for a specific user by their ID.
     */
    get: operations['get_notifications_for_user_notifications__user_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Root */
    get: operations['root__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ChatMessageItem */
    ChatMessageItem: {
      /** Session Id */
      session_id: string;
      /** Message */
      message: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** Meeting */
    Meeting: {
      /** Meeting Id */
      meeting_id: string;
      /** Source Table */
      source_table: string;
      /** Source Id */
      source_id: string;
      /** Title */
      title: string;
      /** Status */
      status?: string | null;
      /** Meeting Url */
      meeting_url?: string | null;
      /**
       * Meeting Start Datetime
       * Format: date-time
       */
      meeting_start_datetime: string;
      /** Meeting End Datetime */
      meeting_end_datetime: string | null;
      /** Location */
      location?: string | null;
      /** Exact Location */
      exact_location?: string | null;
      /** Description */
      description?: string | null;
      /** Tags */
      tags?: string[] | null;
      /** Similarity */
      similarity?: number | null;
      /** Topics */
      topic?: string | null;
    };
    /** MessagesResponseModel */
    MessagesResponseModel: {
      /** Id */
      id: string;
      /** Chat Session */
      chat_session: string;
      /** Content */
      content: string;
      /** Author */
      author: string;
      /**
       * Date
       * Format: date-time
       */
      date: string;
    };
    /** NewChatResponseModel */
    NewChatResponseModel: {
      /** Session Id */
      session_id: string;
    };
    /** NewSessionItem */
    NewSessionItem: {
      /** Title */
      title: string;
      /** User Id */
      user_id: string;
    };
    /** Notification */
    Notification: {
      /** Id */
      id: number;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /**
       * Sent At
       * Format: date-time
       */
      sent_at: string;
      /** Type */
      type: string;
      /** Message */
      message: string | null;
      /** Relevance Score */
      relevance_score: number | null;
    };
    /** ProfileCreate */
    ProfileCreate: {
      /**
       * Id
       * Format: uuid4
       */
      id: string;
      /** Name */
      name: string;
      /** Surname */
      surname: string;
      /** Company Name */
      company_name: string;
      /** Company Description */
      company_description: string;
      /** Topic List */
      topic_list: string[];
      /** Subscribed Newsletter */
      subscribed_newsletter: boolean;
    };
    /** SessionsResponseModel */
    SessionsResponseModel: {
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /** Title */
      title: string;
    };
    /** Topic */
    Topic: {
      /** Topic */
      topic: string;
      /** Id */
      id: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  create_profile_profile__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProfileCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_meetings_meetings_get: {
    parameters: {
      query?: {
        limit?: number;
        /** @description Start datetime (ISO8601) */
        start?: string | null;
        /** @description End datetime (ISO8601) */
        end?: string | null;
        /** @description Search query using semantic similarity */
        query?: string | null;
        /** @description List of topic names (repeat or comma-separated) */
        topics?: string[] | null;
        /** @description Filter by country (e.g., 'Austria', 'European Union') */
        country?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Meeting'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  dummy_crawl_crawler__get: {
    parameters: {
      query?: never;
      header?: {
        token?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: unknown;
          };
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  run_scheduled_tasks_scheduler_tick_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: string;
          };
        };
      };
    };
  };
  run_task_scheduler_run__job_name__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        job_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_chat_response_chat__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChatMessageItem'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_new_session_chat_start_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NewSessionItem'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NewChatResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_all_messages_chat_sessions__session_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MessagesResponseModel'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_user_sessions_chat_sessions_get: {
    parameters: {
      query: {
        user_id: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SessionsResponseModel'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_topics_topics_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Topic'][];
        };
      };
    };
  };
  get_notifications_for_user_notifications__user_id__get: {
    parameters: {
      query?: {
        limit?: number;
      };
      header?: never;
      path: {
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Notification'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: string | boolean;
          };
        };
      };
    };
  };
}
